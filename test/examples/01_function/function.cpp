#include "function.h"

namespace chimera_test
{

//==============================================================================
void void_bool(bool)
{
    // Do nothing
}

//==============================================================================
void void_int(int)
{
    // Do nothing
}

//==============================================================================
void void_long(long)
{
    // Do nothing
}

//==============================================================================
void void_float(float)
{
    // Do nothing
}

//==============================================================================
void void_double(double)
{
    // Do nothing
}

//==============================================================================
void void_a(A)
{
    // Do nothing
}

//==============================================================================
void void_cr_bool(const bool &)
{
    // Do nothing
}

//==============================================================================
void void_cr_int(const int &)
{
    // Do nothing
}

//==============================================================================
void void_cr_long(const long &)
{
    // Do nothing
}

//==============================================================================
void void_cr_float(const float &)
{
    // Do nothing
}

//==============================================================================
void void_cr_double(const double &)
{
    // Do nothing
}

//==============================================================================
void void_cr_a(const A &)
{
    // Do nothing
}

//==============================================================================
int add(int i, int j)
{
    return i + j;
}

//==============================================================================
int void_pointer_param(void *dummy)
{
    Dummy *casted = static_cast<Dummy *>(dummy);
    return casted->val;
}

//==============================================================================
void void_param()
{
    // Do nothing
}

//==============================================================================
void void_return()
{
    // Do nothing
}

//==============================================================================
void function_with_suppressed_param(const SuppressedClass &)
{
    // Do nothing
}

//==============================================================================
void function_with_suppressed_template_param(
    const SuppressedTemplateClass<int> &)
{
    // Do nothing
}

} // namespace chimera_test

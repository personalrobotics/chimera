#include "{{class.mangled_name}}.h"

{{header}}
{{#includes}}
#include <{{.}}>
{{/includes}}
{{#sources}}
#include <{{.}}>
{{/sources}}
#include <pybind11/pybind11.h>
{{postinclude}}

namespace {

{{#class.comment?}}{{!
}}constexpr char {{class.mangled_name}}_docstring[] = R"CHIMERA_STRING({{!
}}{{#class.comment}}{{!
}}{{.}}
{{/class.comment}}{{!
}})CHIMERA_STRING";
{{/class.comment?}}

{{#class.methods}}{{!
}}{{#comment?}}{{!
}}constexpr char {{mangled_name}}_docstring[] = R"CHIMERA_STRING({{!
}}{{#comment}}{{!
}}{{.}}
{{/comment}}{{!
}})CHIMERA_STRING";

{{/comment?}}{{!
}}{{/class.methods}}

} // namespace

void {{class.mangled_name}}(::pybind11::module& m)
{
    {{precontent}}

    auto sm = m{{!
        }}{{#class.namespace_scope}}{{#name}}.def_submodule("{{name}}"){{/name}}{{/class.namespace_scope}};

    auto attr = sm{{!
        }}{{#class.class_scope}}{{#name}}.attr("{{name}}"){{/name}}{{/class.class_scope}};

    ::pybind11::class_<{{class.type}}{{!
        }}{{#class.allow_inheritance}}, chimera_pybind11::Py{{class.name}}<{{class.type}}>{{/class.allow_inheritance}}{{!
        }}{{#class.held_type}}, {{!
        }}{{.}}{{/class.held_type}}{{#class.bases?}}, {{!
        }}{{!
            }}{{#class.bases}}{{qualified_name}}{{^__last__}}, {{/__last__}}{{/class.bases}}{{!
        }}{{/class.bases?}} >(attr, "{{class.name}}"{{!
        }}{{#class.comment?}}, {{class.mangled_name}}_docstring{{/class.comment?}}{{!
        }}{{#class.dynamic_attr}}, ::pybind11::dynamic_attr(){{/class.dynamic_attr}}{{!
        }}){{!

/* default constructor to allow inheritance in Python */}}
{{#class.allow_inheritance}}{{!
}}{{^class.constructors?}}{{!
}}        .def(::pybind11::init<>()){{!
}}{{/class.constructors?}}{{!
}}{{/class.allow_inheritance}}{{!

/* constructors */}}
{{#class.constructors}}{{!
}}{{#overloads}}{{!
    }}        .def(::pybind11::init{{!
        }}<{{#params}}{{type}}{{^__last__}}, {{/__last__}}{{/params}}>(){{!
        }}{{#params?}}, {{#params}}::pybind11::arg("{{name}}"){{^__last__}}, {{/__last__}}{{/params}}{{/params?}})
{{/overloads}}{{!
}}{{/class.constructors}}{{!

/* member functions and static member functions */}}
{{#class.visible_methods}}{{!
}}{{^is_static}}{{!
}}{{#overloads}}{{!
    }}{{^is_static}}        .def{{/is_static}}{{!
    }}{{#is_static}}        .def_static{{/is_static}}{{!
    }}("{{name}}", +[]({{#is_const}}const {{/is_const}}{{class.type}} *self{{#params}}, {{type}} {{name}}{{/params}}){{!
    }}{{#is_void}} { {{/is_void}}{{!
    }}{{^is_void}} -> {{return_type}} { return {{/is_void}}{{!
    }}self->{{call}}({{#params}}{{name}}{{^__last__}}, {{/__last__}}{{/params}}); }{{!
    }}{{#return_value_policy}}, ::pybind11::return_value_policy::{{.}}{{/return_value_policy}}{{!
    }}{{#comment?}}, {{mangled_name}}_docstring{{/comment?}}{{!
    }}{{#params?}}, {{#params}}::pybind11::arg("{{name}}"){{^__last__}}, {{/__last__}}{{/params}}{{/params?}})
{{/overloads}}{{!
}}{{/is_static}}{{!
}}{{/class.visible_methods}}{{!

/* fields */}}
{{#class.fields}}{{!
    }}{{#is_assignable}}        .def_readwrite{{/is_assignable}}{{!
    }}{{^is_assignable}}        .def_readonly{{/is_assignable}}{{!
    }}("{{name}}", &{{qualified_name}})
{{/class.fields}}{{!

/* static fields */}}
{{#class.static_fields}}{{!
    }}{{#is_assignable}}        .def_readwrite_static{{/is_assignable}}{{!
    }}{{^is_assignable}}        .def_readonly_static{{/is_assignable}}{{!
    }}("{{name}}", &{{qualified_name}})
{{/class.static_fields}}
    ;

    {{postcontent}}
}
{{footer}}
